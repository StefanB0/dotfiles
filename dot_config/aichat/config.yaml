# see https://github.com/sigoden/aichat/blob/main/config.example.yaml

# ---- prelude ----
# repl_prelude: role:ebs            # Set a default role or session for REPL mode (e.g. role:<name>, session:<name>, <session>:<role>)
# cmd_prelude: null               # Set a default role or session for CMD mode (e.g. role:<name>, session:<name>, <session>:<role>)
# agent_prelude: null             # Set a session to use when starting a agent (e.g. temp, default)

# ---- session ----
# Controls the persistence of the session. if true, auto save; if false, not save; if null, asking the user
save_session: false
# Compress session when token count reaches or exceeds this threshold
compress_threshold: 3000
# Text prompt used for creating a concise summary of session message
# summarize_prompt: 'Summarize the discussion briefly in 200 words or less to use as a prompt for future context.'
# Text prompt used for including the summary of the entire session
# summary_prompt: 'This is a summary of the chat history as a recap: '

# ---- behavior ----
# stream: true                    # Controls whether to use the stream-style API.
# save: true                      # Indicates whether to persist the message
# keybindings: emacs              # Choose keybinding style (emacs, vi)
editor: notepad++                 # Specifies the command used to edit input buffer or session. (e.g. vim, emacs, nano).
# wrap: no                        # Controls text wrapping (no, auto, <max-width>)
# wrap_code: false                # Enables or disables wrapping of code blocks

model: claude:claude-3-5-haiku-20241022

clients:
  # See https://docs.anthropic.com/claude/reference/getting-started-with-the-api
  - type: claude
  
  # See https://platform.openai.com/docs/quickstart
  - type: openai
  
  # See https://openrouter.ai/docs#quick-start
  - type: openai-compatible
    name: openrouter
    api_base: https://openrouter.ai/api/v1

# Define document loaders to control how RAG and `.file`/`--file` load files of specific formats.
document_loaders:
  # You can add custom loaders using the following syntax:
  #   <file-extension>: <command-to-load-the-file>
  # Note: Use `$1` for input file and `$2` for output file. If `$2` is omitted, use stdout as output.
  pdf: 'pdf2txt.py -o $2 $1'                         # Load .pdf file, see https://poppler.freedesktop.org to set up pdftotext
  docx: 'pandoc --to plain $1'                  # Load .docx file, see https://pandoc.org to set up pandoc
  # Load a git repo with https://github.com/bodo-run/yek
  git: >
    sh -c "yek $1 --json | jq '[.[] | { path: .filename, contents: .content }]'"